Tb <- rbind(Tb,sqrt(n)*colMeans(Xb))
}
distv <- NULL
for(j in 2:ntip){
for(i in 1:(j-1)){
distv <- c(distv,ks.test(Tb[,i],Tb[,j])$statistic)
}
}
mat <- matrix(0, nrow = ntip, ncol = ntip)
mat[upper.tri(mat, diag = FALSE)] <- distv
A <- mat+t(mat)
#grids <- find_pars(Dist=A,n=n,ntip=ntip,Mgroup=3)$grids
grids=0.025
Atree <- A.tree.mult(grids=grids,Mgroup=3,Dist0=A)
gmat <- diag(1/sqrt(rowSums(Atree$Llist[[1]])))%*%Atree$Llist[[1]]
see <- (gmat %*% matrix(colMeans(X)*sqrt(n),ncol=1))
pval <- pchisq(see[,1]^2,df=1,lower.tail=FALSE)
dec <- (p.adjust(pval,"BH")<0.05)
if(sum(dec)==0){
testr <- rep(0,ntip)
}else if(sum(dec)==1){
testr <- Atree$Llist[[1]][dec,]
}else{
testr <- colSums(Atree$Llist[[1]][dec,])
}
truer <- as.integer(data$beta1!=0)
sum((1-truer)*testr)/max(sum(testr),1)
see <- Atree$Llist[[1]]
see2 <- see[rowSums(see)>=2,]
see2
dim(see)
sum((1-truer)*testr)/max(sum(testr),1)
library(survival)
options(na.action=na.exclude) # retain NA in predictions
fit <- coxph(Surv(time, status) ~ age + ph.ecog + strata(inst), lung)
fit
predict(fit,type="risk",se.fit=TRUE)
options(na.action=na.exclude) # retain NA in predictions
fit <- coxph(Surv(time, status) ~ age + ph.ecog, lung)
fit
head(lung)
fit$coefficients
lung$age*fit$coefficients[1]+lung$ph.ecog*fit$coefficients[2]
exp(lung$age*fit$coefficients[1]+lung$ph.ecog*fit$coefficients[2])
predict(fit,type="risk")
str(fit)
lung$age*fit$coefficients[1]+lung$ph.ecog*fit$coefficients[2]
exp(lung$age*fit$coefficients[1]+lung$ph.ecog*fit$coefficients[2])
predict(fit, type="risk")
1/predict(fit, type="risk")
fit
fit$coefficients
see=lung[,c("age","ph.ecog")]
head(see)
dim(lung)
see<- lung[1:20,c("age","ph.ecog")]
see
see<- lung[1:20,c("age","ph.ecog","time", "status")]
head(see)
fit <- coxph(Surv(time, status) ~ age+ph.ecog, data=see)
fit
coef <- fit$coefficients
coef
coef[1]*see$age+coef[2]*see$ph.ecog
exp(coef[1]*see$age+coef[2]*see$ph.ecog)
predict(fit)
predict(fit,type="lp")
lung(sex)
table(lung$sex)
lung$age
see<- lung[1:20,c("age","ph.ecog","time", "status","sex")]
fit <- coxph(Surv(time, status) ~ sex, data=see)
fit
fit$coefficients*see$sex
exp(
fit$coefficients*see$sex)
predict(fit,type="risk")
table(see$sex)
fit$coefficients*(see$sex-1)
fit$coefficients*(see$sex)
exp(fit$coefficients*(see$sex))
exp(fit$coefficients*(see$sex))/predict(fit,type="risk")
fit
str(fit)
exp(fit$coefficients*mean(see$sex))
predict(bst,M1)
mean((predict(bst,M1)-log(cgtest$surgical_interval_mo))^2)
getwd()
setwd("Users/xuechan/Documents/")
warnings()
see <- function(a){
1/sqrt(a)+2/sqrt(a+1)-sqrt(a/(a^2-1))
}
see(100)
see(2)
see(10000)
s2 <- function(r){
1/2+2*sqrt(r)-sqrt((1-r)/3)
}
s2(0.00001)
s2(0.00002)
s2(0.01)
s2 <- function(r,s){
sqrt(1/s)+2*sqrt(r)-sqrt((1-r)/(s-1))
}
s2(0.01,2)
s2(0.01,4)
s2(0.01,6)
s2(0.001,6)
s2(0.0001,6)
s2(0.001,6)
s2(0.001,5)
s2(0.001,2)
s2(0.001,3)
s2 <- function(r,s){
sqrt(1/s)+2*sqrt(r)-sqrt((1-r)/(s/2))
}
s2(0.01,3)
s2(0.01,6)
s2(0.01,5)
s2(0.01,3)
s2(0.01,4)
s2(0.02,4)
s2(0.02,3)
s2(0.02,2)
s2 <- function(r,s){
sqrt(1/s)+2*sqrt(r)-sqrt((1-r)/(s/3))
}
s2(0.02,3)
s2 <- function(r,s){
sqrt(1/s)+2*sqrt(r)-sqrt((1-r)/(s-1))
}
s2(1/(3^1+1),2)
s2(1/(3^5+1),2)
s2(1/(3^4+1),2)
s2(1/(3^3+1),2)
3^2
3^3
3^4
2^3
2^3
3^3
2^3
log(log(100000000000))
load("/Users/xuechan/Documents/Study/Rotation-Jichun/project_1/DART_Code/Data_Analysis/Dist0.RData")
Dist0[1:4,1:4]
100*40
80*40
80*40*12
80*40*12*4
60*40*12*4
50*40*12*4
50*40
50*40*4
50*40*4
50*40*4*12
75*40*4*12
75*40*4
50*40*4*12
75*40*4)12
75*40*4*12
60*40*4*12
7.5*2/3
outdf <- cbind(outdf,"ASV seq"=colnames(out1))
seq(4)
seq_len(5)
seq_along(c(1,4,2,7,3))
rep(c(1:3),times=2)
rep(c(1:3),times=4)
rep(1,times=4)
rep(4,NA)
rep(4,5)
genSpMat <- function(nrows, ncols, col_probs) {
require(Matrix)
r <- lapply(1:ncols, function(x) {
p <- col_probs[x]
i <- sample.int(2L, size = nrows, replace = T, prob = c(1 - p, p))
which(i == 2L)
})
rl <- lengths(r)
nc <- rep(1:ncols, times = rl) # col indexes
nr <- unlist(r) # row index
ddims <- c(nrows, ncols)
#ngTMatrix output
sparseMatrix(i = nr, j = nc, dims = ddims,giveCsparse = FALSE)
}
library(Matrix)
getSpMatrix(10,10,0.5)
getSpMat(10,10,0.5)
genSpMat(10,10,0.5)
genSpMat(10,10,rep(0.5,10))
nrows=10;ncols=5;col_probs=c(1:5)/10
r <- lapply(1:ncols, function(x) {
p <- col_probs[x]
i <- sample.int(2L, size = nrows, replace = T, prob = c(1 - p, p))
which(i == 2L)
})
r
2L
str(2L)
lengths(r)
rl <- lengths(r)
nc <- rep(1:ncols, times = rl)
nc
unlist(r)
DF = data.frame(ID = c("b","b","b","a","a","c"), a = 1:6, b = 7:12, c = 13:18)
DF
DF = data.frame(ID = c("b","b","b","a","a","c"), a = 1:6, b = 7:12, c = 13:18)
DF
DF$c <- 18:13
DF$c[DF$ID == "b"] <- 15:13
DT[, c("colA", "colB", ...) := list(valA, valB, ...)]
flights <- fread("flights14.csv")
flights
library("data.table")
flights <- fread("flights14.csv")
flights
install.packages("data.table")
install.packages("data.table")
library("data.table")
flights <- fread("flights14.csv")
flights
DT = data.table(a = LETTERS[c(3L,1:3)], b = 4:7)
DT
DT[, c := 8]
DT
DT[, c := b]
DT
load("/Users/xuechan/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/350B7135-307F-45E4-A56D-C85B96E72092/ALS_sim_data_maf_snv_rare_final_nvpl_5_v2.RData")
x <- rev(rep(6:10, 1:5))
rle(x)
str(rle(x))
diff(x)
x
diff(1:3)
diff(rev(x))
rev(x)
rev(x,2)
rev(x,lag=2)
diff(x,lag=2)
diff(rev(x),lag=2)
rev(x)
rev(seq_along(1:5))
seq_along(1:5)
seq(10)
X <- list(1:4,1:5)
lengths(X)
length(X)
seq_along(X)
rbinom(10,1,0.4)
rbinom(10,1,0.4)
rbinom(10,1,0.4)
rbinom(10,1,0.4)
rbinom(10,1,0.4)
rbinom(10,1,0.4)
16561/3600
40/2
20*10
sample(1:10,c(2,3))
sample(1:10,2
)
sample(1:10,c(2,3,4))
sample(1:10,c(3,2,4))
3*100*1000
4*100*1000
Sim.mat = data.frame("Test","Layer","samplesize_factor","FDP","Sensitivity")
Sim.mat
Sim.mat <- rbind(Sim.mat c(1:5))
Sim.mat <- rbind(Sim.mat, c(1:5))
pbinom(0,10,0.2)
pbinom(0,20,0.2)
pbinom(0,30,0.2)
(1-pbinom(0,30,0.2))^20
log10(-/-5)
log10(0.05)
floor(log10(0.05))
log10(0.05)
m=400000
k=400
log(k,m)
log(40,m)
library(data.table)
DT = data.table(grp=rep(c("A", "B", "C", "A", "B"), c(2,2,3,1,2)), value=1:10)
rleid(DT$grp) # get run-length ids
DT
5%%3
5%3
X = data.table(a=1:5, b=6:10, c=c(5:1))
X[b %between% c(7,9)]
X[between(b, 7, 9)] # same as above
# NEW feature in v1.9.8, vectorised between
X[c %between% list(a,b)]
X[between(c, a, b)] # same as above
X[between(c, a, b, incbounds=FALSE)] # open interval
# inrange()
Y = data.table(a=c(8,3,10,7,-10), val=runif(5))
range = data.table(start = 1:5, end = 6:10)
Y[a %inrange% range]
Y[inrange(a, range$start, range$end)] # same as above
Y[inrange(a, range$start, range$end, incbounds=FALSE)] # open interval
10000/3600
10050/3600
10050/60
310.15
31*0.15
sqrt(1/4)+sqrt(1/12)
sqrt(1/3)
1/4+1/12
1/3
sqrt(1/10)+sqrt(1/110)
sqrt(1/9)
s=10
sqrt((s-1)/s)*(1+sqrt(1/(s+1)))
s=4
sqrt((s-1)/s)*(1+sqrt(1/(s+1)))
s=2
sqrt((s-1)/s)*(1+sqrt(1/(s+1)))
s=2
#sqrt((s-1)/s)*(1+sqrt(1/(s+1)))
sqrt(1/2)*(1+sqrt(1/(s+1)))
M=3
L=4
s=M^(L-2)
sqrt(1/2)*(1+sqrt(1/(M^(L-1)+1)))
sqrt((s-1)/s)*(1+sqrt(1/(M^(L-1)+1)))
sqrt((s-1)/s)*(1+sqrt(r1))
sqrt(1-r1)
M=3
L=4
s=M^(L-2)
r1=1/(M^(L-1)+1)
sqrt(1/2)*(1+sqrt(1/(M^(L-1)+1)))
sqrt((s-1)/s)*(1+sqrt(r1))
sqrt(1-r1)
(s-1)/s
sqrt(1/3)*(1+sqrt(r1))
sqrt(1-r1)
sqrt(2/3)*(1+sqrt(r1))
sqrt(1-r1)
M=3
L=4
s=M^(L-1)
r1=1/(M^(L-1)+1)
sqrt((s-1)/s)*(1+sqrt(r1))+sqrt(r1)-sqrt(1-r1)
M
+sqrt(r1)-sqrt(1-r1)
M^(L-1)
sqrt((s-10)/s)*(1+sqrt(r1))+sqrt(r1)-sqrt(1-r1)
sqrt(1/2)*(1+sqrt(r1))+sqrt(r1)-sqrt(1-r1)
sqrt(1/s)*(1+sqrt(r1))+sqrt(r1)-sqrt(1-r1)
sqrt(1/3)*(1+sqrt(r1))+sqrt(r1)-sqrt(1-r1)
1/sqrt(2)+1/sqrt(3)
1/sqrt(2)+1/sqrt(4)
1/sqrt(2)
1/(1-1/sqrt(2))
log(100)
sqrt(log(1000))
subgene <- c("CRYBB1","CST3","P2RY12","PROS1",
"JUN","JUNB","JUND","FOS","EGR1","KLF6","AFT3",
"BMP2K","BHLHE41","NCOA3","NOTCH2",
"PLP1","PLTP","MBP",
"CD63","CD9",
"TMEM119","P2RY12","CRYBB1","CSF1","MCM5","IFIT3",
"B2M","H2-D1","H2-K1","H2-OA","H2-DMA","BST2","LGALS3BP","CCL12",
"STMN1","TUBB5","TUBA1B","CDK1","TOP2A",
"LY6C2","CCR2","TGFBI","LY6C2","TGFBI","IFITM2","IFITM3","S100A6")
length(subgene)
length(unique(subgene))
subgene <- c("CRYBB1","CST3","P2RY12","PROS1",
"JUN","JUNB","JUND","FOS","EGR1","KLF6","AFT3",
"BMP2K","BHLHE41","NCOA3","NOTCH2",
"PLP1","PLTP","MBP",
"CD63","CD9",
"TMEM119","P2RY12","CRYBB1","CSF1","MCM5","IFIT3",
"B2M","H2-D1","H2-K1","H2-OA","H2-DMA","BST2","LGALS3BP","CCL12",
"STMN1","TUBB5","TUBA1B","CDK1","TOP2A",
"LY6C2","CCR2","TGFBI","IFITM2","IFITM3","S100A6")
TCgene <- c("P2RY12","HEXB","SPARC","TEME119","GPR34","OLFML3","CD81","SELPLG","CST3","CX3CR1",
"CCL5","PLAC8","LY6C2","LY6I","MS4A4C","LGALS3","CRIP1","AW112010","IFITM3","ISG15")
MGPgene <- c("SELPLG","P2RY12","TEME119","CX3CR1","P2RY13","TGFBI","IFITM2","S100A11","S100A6")
sqrt(log(1000))
sqrt(log(1000)*0.9)
sqrt(log(1000)*0.9)/sqrt(2)
sqrt(log(1000)*0.9)/sqrt(5)
sqrt(log(1000)*0.9)/sqrt(9)
N(0,0.1)
qnorm(0.1,0,0.1)
pnorm(0.1,0,0.1)
pnorm(0.1,0,0.01)
pnorm(0.01,0,0.01)
pnorm(0.01,0,0.1)
siggene <- unique(c(Subgene,TCgene,MGPgene))
Subgene <- c("CRYBB1","CST3","P2RY12","PROS1",
"JUN","JUNB","JUND","FOS","EGR1","KLF6","AFT3",
"BMP2K","BHLHE41","NCOA3","NOTCH2",
"PLP1","PLTP","MBP",
"CD63","CD9",
"TMEM119","P2RY12","CRYBB1","CSF1","MCM5","IFIT3",
"B2M","H2-D1","H2-K1","H2-OA","H2-DMA","BST2","LGALS3BP","CCL12",
"STMN1","TUBB5","TUBA1B","CDK1","TOP2A",
"LY6C2","CCR2","TGFBI","IFITM2","IFITM3","S100A6")
TCgene <- c("P2RY12","SPARC","TEME119","GPR34","SELPLG","CST3","CX3CR1","LY6I","LY6C2","IFITM3")
MGPgene <- c("SELPLG","P2RY12","TMEM119","CX3CR1","P2RY13","TGFBI","IFITM2","S100A11","S100A6")
siggene <- unique(c(Subgene,TCgene,MGPgene))
length(siggene)
0.105*66/70
rnorm(10,0,0.1)
rnorm(100,0,0.1)
2265/3600
range(rnorm(100,0,0.05))
1/1.2
rnorm(-0.01,0,0.05)
pnorm(-0.01,0,0.05)
rnorm(-0.02,0,0.05)
pnorm(-0.02,0,0.05)
pnorm(-0.1,0,0.05)
pnorm(-0.1,0,0.05)
sqrt(2)+1/16
1/4
m=10000
m*(1-(log(m))^2/m)^m
m=10000
m^2*(1-(log(m))^2/m)^m
mm=10000
m <- log m
mm*(1-(log(m))^2/m)^m
mm=100
m <- log m
mm*(1-(log(m))^2/m)^m
mm=1
m <- log m
mm*(1-(log(m))^2/m)^m
mm=2
m <- log mm
mm*(1-(log(m))^2/m)^m
1-(log(m))^2/m
m
m
mm=2
m <- log(mm)
m
mm*(1-(log(m))^2/m)^m
mm=200
m <- log(mm)
mm*(1-(log(m))^2/m)^m
mm=2000000
m <- log(mm)
mm*(1-(log(m))^2/m)^m
mm=2000000
m <- log(mm)
m <- mm
mm*(1-(log(m))^2/m)^m
mm=2000
m <- log(mm)
m <- mm
mm*(1-sqrt(m)/m)^m
mm=2000
m <- log(mm)
m <- mm
mm*(1-m^(0/99)/m)^m
mm=20
m <- log(mm)
m <- mm
mm*(1-m^(0/99)/m)^m
mm=20
m <- log(mm)
m <- mm
mm*(1-m^(0.99)/m)^m
mm=20
m <- log(mm)
#m <- mm
mm*(1-m^(0.99)/m)^m
mm=20
m <- log(mm)
#m <- mm
mm*(1-m^(0.5)/m)^m
mm=2000
m <- log(mm)
#m <- mm
mm*(1-m^(0.5)/m)^m
mm=200000
m <- log(mm)
#m <- mm
mm*(1-m^(0.5)/m)^m
mm=200000
m <- log(mm)
#m <- mm
mm*(1-m^(0.8)/m)^m
mm=200000
m <- log(mm)
#m <- mm
mm*(1-m^(0.9)/m)^m
mm=200000000
m <- log(mm)
#m <- mm
mm*(1-m^(0.9)/m)^m
load("/Users/xuechan/Downloads/taxtab_silva_rc.RData")
View(silvatax_rc)
load("/Users/xuechan/Downloads/taxtab_rdp_rc.RData")
load("/Users/xuechan/Downloads/taxtab_greengenes_rc.RData")
View(rdptax_rc)
View(rdptax_rc)
dim(slivatax_rc)
dim(silvatax_rc)
dim(rdptax_rc)
load("taxtab_rdp_rc.RData")
load("/Users/xuechan/Documents/Study/Rotation-Jichun/Micro_data/DART_Selected_seq/taxtab_rdp_rc.RData")
View(rdptax_rc)
which.min(1:3)
which.min(c(1:3,0)
)
pdf("Clostridia_binary.pdf")
